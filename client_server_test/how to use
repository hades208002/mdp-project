<<<<<<< HEAD
# HOW to use 

1) run central = CentralModelCommunication()


2) ## GUI
- prepare dataset
- create self.loca = LocalModelCommunication(data = <DATASET>)
- crossValidationResult = self.loca.chooseModel_with_crossValidation_and_train() // get a dataframe with (name of the model, accuracy, standard deviation), or a "no data" if there is no training dataset
- self.loca.connectToCentral() // return false if cannot connect


3) ## APP
- create self.loca = LocalModelCommunication(caller = <caller object (the APP self)> )
- self.loca.connectToCentral() // return false if cannot connect
- prediction request self.loca.requestPrediction(<DATA without AFclass>) -> check the predictionResultsReceived function in the localModelCommunication file -> at the end of predictionResultsReceived you can call the function of the "caller (APP)"
- send data for central training self.sendDataForCentralTraining(<DATA with AFclass>) -> check sendNextChunkOfTrainingData function in LocalModelCommunication file -> -> at the end of sendNextChunkOfTrainingData you can call the function of the "caller (APP)"









































#How to use old
=======
#How to use
>>>>>>> master
1) run the central model : 
- from CentralModelCommunication import CentralModelCommunication
- a = CentralModelCommunication()

2) create local model :
- loca = LocalModelCommunication(data = <DATAFRAME COMPLETE>)

3) predict data :
- loca.requestPrediction(<DATAFRAME WITHOUT TARGET>)

4) to send data to the central model :
- loca.sendDataForCentralTraining(<DATAFRAME COMPLETE>)

5) to trigger the training process (central model):
- loca.sendData(pd.DataFrame(), "trigger test")

# TIPS
### - steps 2,3,4,5 can be performed by anylocal model created
### - wait the response before sending other requests 
### - to wait the result (and trigger some other functions) -> modify the  predictionResultsReceived function of the LocalModelCommunication
